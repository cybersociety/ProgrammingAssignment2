install.packages("Rcmdr")
curl -o http://r.research.att.com/libs/gfortran-4.8.2-darwin13.tar.bz2
curl -O http://r.research.att.com/libs/gfortran-4.8.2-darwin13.tar.bz2
curl -O http://r.research.att.com/libs/gfortran-4.8.2-darwin13.tar.bz2
quartz()
library("Rcmdr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("car",dependencies=TRUE)
library("Rcmdr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("XQuartz")
install.packages("XQuartz")
library("Rcmdr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("Rcmdr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("Rcmdr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
mean(25:82)
seq(32,44)
v <- 5:13
v
seq(5, 9, by = 0.4)
college=read.csv("/Users/revanthreddyairre/Desktop/school stuff/Data-Mining/resources/dataSets/College.csv
""
;
AFDA
college=read.csv("/Users/revanthreddyairre/Desktop/school stuff/Data-Mining/resources/dataSets/College.csv")
rownames(college) <- college[,1]
college <- college[,-1]
summary(college)
> rownames(college)=college[,1]
rownames(college)=college[,1]
rm(row.names())
rm(row.names)
rm(list=ls(all=TRUE))
row.names(x)
row.names.data.frame
> college=college[,-1]
college=college[,-1]
clear
college = read.csv("/Users/revanthreddyairre/Desktop/school stuff/Data-Mining/resources/dataSets
/College.csv")
college=read.csv("/Users/revanthreddyairre/Desktop/school stuff/Data-Mining/resources/dataSets
/College.csv")
college=read.csv("/Users/revanthreddyairre/Desktop/school stuff/Data-Mining/resources/dataSets/College.csv")
rownames(college)=college[,1]
fix(college)
college=college[,-1]
fix(college)
summery(college)
summary(college)
pairs(college[,1:10])
plot(college$Outstate, college$Private)
Elite=rep("No",nrow(college))
Elite[college$Top10perc >50]="Yes"
Elite=as.factor(Elite)
college=data.frame(college ,Elite)
summary(Elite)
plot(college$Outstate, college$Elite)
par(mfrow=c(2,2))
hist(college$PhD)
hist(college$Accept)
hist(college$S.F.Ratio)
par(mfrow=c(1,2))
par(mfrow=c(2,2))
hist(college$Enroll)
hist(college$PhD)
hist(college$Accept)
hist(college$Grad.Rate)
private vs. public universities")
main = "Student/faculty ratio of private vs. public universities")
main = "No. of applications received in private vs. public universities")
par(mfrow = c(1,3))
plot(Private, log(Apps), names= c("Public", "Private"), xlab= "Univ Type", ylab ="log(No. of applications received"/2))
plot(Private, log(Apps), names= c("Public", "Private"), xlab= "Univ Type", ylab ="log(No. of applications received)/2")
plot(college$Private, log(Apps), names= c("Public", "Private"), xlab= "Univ Type", ylab ="log(No. of applications received)/2")
plot(college$Private, names= c("Public", "Private"), xlab=" Univ Type", ylab = "log(No. of applications received)/2")
plot(college$Private, collect$Apps, names= c("Public", "Private"), xlab=" Univ Type", ylab = "log(No. of applications received)/2")
plot(college$Private, college$Apps, names= c("Public", "Private"), xlab=" Univ Type", ylab = "log(No. of applications received)/2")
par(mfrow = c(1,3))
plot(college$Private, college$Apps, names= c("Public", "Private"), xlab=" Univ Type", ylab = "log(No. of applications received)/2")
par(mfrow = c(1,3))
plot(college$Private, college$Apps, names= c("Public", "Private"), xlab=" Univ Type", ylab = "log(No. of applications received)/2")
par(mfrow = c(1,2))
plot(college$Private, college$Apps, names= c("Public", "Private"), xlab=" Univ Type", ylab = "log(No. of applications received)/2")
plot(college$Private, college$Accept, names= c("Public", "Private"), xlab=" Univ Type", ylab = "log(Acceptance rate"))
plot(college$Private, college$Accept, names= c("Public", "Private"), xlab=" Univ Type", ylab = "log(Acceptance rate)")
plot(college$Private, college$Accept, names= c("Public", "Private"), xlab=" Univ Type", ylab = "log(Acceptance rate)‚Äù)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
;
));
))))))) }
pairs(Auto)
Auto = Auto = read.table("/Users/revanthreddyairre/Desktop/school stuff/Data-Mining/resources/dataSets/Auto.data.txt", head=T, na.strings="?")
pairs(Auto)
names(Auto)
cor(1:8)
cor[Auto(1:8)]
cor(Auto[1:8])
fit <- lm(mpg ~, -name, data=Auto)
fit <- lm(mpg ~. -name, data=Auto)
summary(fit)
biocLite()
source("https://bioconductor.org/biocLite.R")
biocLite()
read.table("/Users/revanthreddyairre/Downloads/hScore/hScore", header=TRUE, skip=3)
read.table("/Users/revanthreddyairre/Downloads/hScore/hScore.dat", header=TRUE, skip=3)
colnames(data)
data = read("/Users/revanthreddyairre/Downloads/hScore/hScore.dat", header=TRUE, skip=3)
as.vector(read.table("/Users/revanthreddyairre/Downloads/hScore/hScore.dat", header=TRUE, skip=3)$Values)
readLines("/Users/revanthreddyairre/Downloads/hScore/hScore.dat", n=10)
data -< read.delim("/Users/revanthreddyairre/Downloads/hScore/hScore.dat", sep="")
data <- read.delim("/Users/revanthreddyairre/Downloads/hScore/hScore.dat", sep="")
cor(data, use="complete.obs", method="kendall")
install.packages(plsdepot)
install.packages("plsdepot")
library(plsdepot)
data <- read.table("/Users/revanthreddyairre/Downloads/hScore/hScore.dat", quote="\", comment.char = "")
data <- read.table("/Users/revanthreddyairre/Downloads/hScore/hScore.dat", quote="\"", comment.char = "")
data <- read.table("/Users/revanthreddyairre/Downloads/hScore/hScore.dat", quote="\"", comment.char = "")
view (data)
view(data)
View(data)
totalscore <- read.table(path of your hscore.dat", nrows = 1, skip =50)
51strow <- read.table("/Users/revanthreddyairre/Downloads/hScore/hScore.dat", skip=50)
lastrow <- read.table("/Users/revanthreddyairre/Downloads/hScore/hScore.dat", skip=50)
View(lastrow)
pc1 = t(data)
View(pc1)
pc2= t(lastrow)
View(pc2)
v1 = plsreg1(pc1, pc2, comps=2, crosval=FALSE)
plot(v)
plot(v1)
scf =t(v1$std.coefs)
View(scf)
rcf =t(v1$reg.coefs)
View(rcf)
r2 =t(v1$R2)
View(r2)
factor_data <- factor(data)
factor_data <- factor(data)
factor_data <- factor(pc1)
View(r2)
factor_data <- factor(pc1)
p_levels=t(levels(factor_data))
View(p_levels)
summary(p_levels)
summary(r2)
data2 <- read.table("/Users/revanthreddyairre/Downloads/hScore/hScore.dat", quote="\"", comment.char = "")
view (data)
View(data)
lastrow2 <- read.table("/Users/revanthreddyairre/Downloads/hScore/hScore2.dat", skip=50)
data <- read.table("/Users/revanthreddyairre/Downloads/hScore/hScore.dat", quote="\"", comment.char = "")
View(data)
response <- read.table("/Users/revanthreddyairre/Downloads/hScore/hScore.dat", skip=50)
View(data)
View(response)
p1 <- t(data)
View(p1)
y <- t(response)
View(y)
library(plsdepot)
v1 = plsreg1(p1, y2, comps=2, crosval=FALSE)
v1 = plsreg1(p1, y, comps=2, crosval=FALSE)
plot(v1)
std_co-efficient <- t(plsreg1$std.coefs)
std_co-efficient <- t(plsreg$std.coefs)
std_co-efficient <- t(v1$std.coefs)
std_coefficient <- t(v1$std.coefs)
View(std_coefficient)
regression_coefs <-t(v1$reg.coefs)
View(regression_coefs)
r2 <- t(v1$R2)
View(r2)
pfactor <- factor(p)
pfactor <- factor(p1)
data_levels -< t(levels(pfactor))
data_levels <- t(levels(pfactor))
View(data_levels)
View(data_levels)
data <- read.table("/Users/revanthreddyairre/Downloads/hScore/hScore1.dat", quote="\"", comment.char = "")
data2 <- read.table("/Users/revanthreddyairre/Downloads/hScore/hScore1.dat", quote="\"", comment.char = "")
View(data)
response2 <- read.table("/Users/revanthreddyairre/Downloads/hScore/hScore.dat", skip=50)
View
View(response2)
p2 <- t(data2)
View(p2)
y2 <- t(response2)
View(y2)
v2 = plsreg1(p2, y2, comps=2, crosval = FALSE)
plot(v2)
std_coefficient2 <- t(v2$std.coefs)
View(std_coefficient2)
regression_coefs2 <- t(v2$reg.coefs)
View(regression_coefs2)
r2 <- t(v2$R2)
View(r2)
pfactor2 < factor(p2)
pfactor2 <- factor(p2)
data_levels2 -< t(levels(pfactor2))
data_levels2 <- t(levels(pfactor2))
View(data_levels2)
final = plsreg1(p1, y2, comps=2, crosval = FALSE)
final = plsreg1(y, y2, comps=2, crosval = FALSE)
summary(v1)
summary(v2)
summary(data)
summary(response)
help(std.coefs)
??std.coefs
swirl()
swirl::info()
bye()
swirl::bye()
swrirl()
swirl()
swirl::swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vest <- ssupply(flags, class)
cls_vest <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors$red, sum)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
union(c(3, 4, 5, 5, 5, 6, 6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- (lapply(flags, unique))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags#animate)
dfasfa
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
data(iris)
?iris
sapply(Sepal.Length, mean)
sapply(iris.Sepal.Length, mean)
data_iris <- iris
sapply(data_iris$Sepal.Length, mean)
tapply(data_iris$Sepal.Length, data_iris$Species, mean)
abs(mean(mtcars$hp[mtcars$cyl==4])-mean(mtcars$hp[mtcars$cyl==8]))
workdir()
setwd("/Library/Frameworks/R.framework/Versions/3.3/Resources/library/swirl/Courses/R_Programming/lapply_and_sapply")
setwd("~/work/coursera/datascience/r_playground/coursera/week3/ProgrammingAssignment2")
load(cachematrix())
setwd("/Library/Frameworks/R.framework/Versions/3.3/Resources/library/swirl/Courses/R_Programming/lapply_and_sapply")
setwd("~/work/coursera/datascience/r_playground/coursera/week3/ProgrammingAssignment2")
getwd()
cachemetri()
load()
load(envir = cachematrix.R)
load(envir = /Users/revanthreddyairre/work/coursera/datascience/r_playground/coursera/week3/ProgrammingAssignment2/cachematrix.R)
getwd()
loadNamespace(cachematrix.R)
load(envir = cachematrix.R)
load(envir=cachematrix.R)
load(envir = cachematrix.R)
source(cachematrix.R)
source("cachematrix.R")
View(makeCacheMatrix)
x= rbind(c(2, 5), c(3, 6))
mx = makeCacheMatrix(x)
mx$get()
cacheSolve(mx)
cacheSolve(mx)
cacheSolve(mx)
mx$set()
mx$setinverse(mx)
cacheSolve(mx)
x= rbind(c(10, 3), c(9, 2))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
m$set()
m$setinverse()
m$setinverse(x)
cacheSolve(m)
